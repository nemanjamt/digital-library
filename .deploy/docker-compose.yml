services:
  digital-library-app:
    build:
      context: ..
      dockerfile: .deploy/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development

  zap-api-scan:
    image: zaproxy/zap-stable
    container_name: zap-api-scan
    depends_on:
      - digital-library-app
    volumes:
      - .zap/api-scan:/zap/wrk:rw # Store ZAP data locally
    entrypoint: >
      sh /zap/wrk/start-api-zap.sh
    ports:
      - "8080:8080" # ZAP API and web interface
  zap-full-scan:
    image: zaproxy/zap-stable
    container_name: zap-full-scan
    depends_on:
      - digital-library-app
    volumes:
      - .zap/full-scan:/zap/wrk:rw # Store ZAP data locally
    entrypoint: >
      sh /zap/wrk/start-full-zap.sh
    ports:
      - "8081:8081" # ZAP API and web interface

  sonarqube:
    container_name: sonarqube
    image: sonarqube:lts-community
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9000:9000"
    networks:
      - sonarnet
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    healthcheck:
      test: ["CMD", "wget", "--method=GET","http://localhost:9000/api/server/version", "-O", "-"]
      interval: 30s
      timeout: 15s
      retries: 10

  sonar_db:
    image: postgres:13
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    networks:
      - sonarnet
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data
  
  sonarscanner:
    container_name: sonarscanner
    build:
      context: ..
      dockerfile: .sonar/Dockerfile-sonarscanner
    depends_on:
      sonarqube:
        condition: service_healthy
    networks:
      - sonarnet
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
    volumes:
      - ../.done:/.done
    entrypoint: ["/bin/bash", "-c", "/usr/src/.sonar/generate-token.sh && export SONAR_TOKEN=$(cat /usr/src/sonar_token.txt) && sonar-scanner && touch /.done/sonarscanner.done"]
    # entrypoint: ["/bin/bash", "-c", "tail -f /dev/null"]
  
  report-generate:
    container_name: report-general
    build:
      context: ..
      dockerfile: .report/Dockerfile
    networks:
      - sonarnet
    volumes:
      - ../.report/general-report:/app/reports
      - ../.deploy/.zap/api-scan:/app/api-scan
      - ../.deploy/.zap/full-scan:/app/full-scan
      - ../.dependency-check/reports/:/app/dependency-check
      - ../.done:/.done
    # entrypoint: ["/bin/bash", "-c", "tail -f /dev/null"]
    entrypoint: ["/bin/bash", "-c", "rm -f /.done/sonarscanner.done && while [[ ! -f /.done/sonarscanner.done || ! -f /.done/dependency-scan.done ]]; do echo 'Waiting for sonarscanner to finish...'; sleep 5; done; echo 'Starting report generation...' ; sleep 20 && python .report/generate-report2.py"]
  
  owasp-dependency-check:
    container_name: owasp-dependency-check
    build:
      context: ..
      dockerfile: .dependency-check/Dockerfile
    volumes:
      - ../:/src                   
      - ../.dependency-check/reports:/reports       
      - ../.done:/.done
    entrypoint: ["/bin/sh", "-c", "rm -f /.done/dependency-check.done && /usr/share/dependency-check/bin/dependency-check.sh --project DIGITAL_LIBRARY_PROJECT --scan /src --format ALL --out /reports --nvdApiKey 19f22f54-88f6-4486-929d-95eabb568898 && touch /.done/dependency-scan.done"] 

  build-sign:
    image: node:18
    container_name: build_sign_service
    working_dir: /app
    volumes:
      - ..:/app
    environment:
      GPG_NAME: DefaultName
      GPG_EMAIL: example@domain.com
      GPG_PASSPHRASE: "your-passphrase"
      SERVICE_NAME: "digital-library-1.0.0"
    # command: > 
    #   tail -f /dev/null
    command: >
      bash -c "
        ./.signing/setup-gpg.sh &&
        npm install &&
        npm run build &&
        npm pack &&
        gpg --batch --yes --passphrase $GPG_PASSPHRASE --detach-sign --output digital-library-1.0.0.tgz.sig digital-library-1.0.0.tgz &&
        ./.signing/verify-signature.sh digital-library-1.0.0.tgz digital-library-1.0.0.tgz.sig
      "


networks:
  sonarnet:

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data: