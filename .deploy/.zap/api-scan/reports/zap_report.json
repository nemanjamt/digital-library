{
	"@programName": "ZAP",
	"@version": "2.15.0",
	"@generated": "Mon, 30 Dec 2024 11:06:29",
	"site":[ 
		{
			"@name": "http://digital-library-app:3000",
			"@host": "digital-library-app",
			"@port": "3000",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "10037",
					"alertRef": "10037",
					"alert": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)",
					"name": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>The web/application server is leaking information via one or more \"X-Powered-By\" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.</p>",
					"instances":[ 
						{
							"uri": "http://digital-library-app:3000/openapi.json",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "X-Powered-By: Express",
							"otherinfo": ""
						}
					],
					"count": "1",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.</p>",
					"otherinfo": "",
					"reference": "<p>https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework</p><p>https://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html</p>",
					"cweid": "200",
					"wascid": "13",
					"sourceid": "1"
				},
				{
					"pluginid": "100001",
					"alertRef": "100001",
					"alert": "Unexpected Content-Type was returned",
					"name": "Unexpected Content-Type was returned",
					"riskcode": "1",
					"confidence": "3",
					"riskdesc": "Low (High)",
					"desc": "<p>A Content-Type of text/html was returned by the server.</p><p>This is not one of the types expected to be returned by an API.</p><p>Raised by the 'Alert on Unexpected Content Types' script</p>",
					"instances":[ 
						{
							"uri": "http://digital-library-app:3000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/8577838430805825219",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/actuator/health",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/latest/meta-data/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "",
					"otherinfo": "",
					"reference": "",
					"cweid": "-1",
					"wascid": "-1",
					"sourceid": "5"
				},
				{
					"pluginid": "10021",
					"alertRef": "10021",
					"alert": "X-Content-Type-Options Header Missing",
					"name": "X-Content-Type-Options Header Missing",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>",
					"instances":[ 
						{
							"uri": "http://digital-library-app:3000/openapi.json",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						}
					],
					"count": "1",
					"solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>",
					"otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>",
					"reference": "<p>https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)</p><p>https://owasp.org/www-community/Security_Headers</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "1"
				},
				{
					"pluginid": "100000",
					"alertRef": "100000",
					"alert": "A Client Error response code was returned by the server",
					"name": "A Client Error response code was returned by the server",
					"riskcode": "0",
					"confidence": "3",
					"riskdesc": "Informational (High)",
					"desc": "<p>A response code of 404 was returned by the server.</p><p>This may indicate that the application is failing to handle unexpected input correctly.</p><p>Raised by the 'Alert on HTTP Response Code Error' script</p>",
					"instances":[ 
						{
							"uri": "http://digital-library-app:3000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/8577838430805825219",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/actuator/health",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://digital-library-app:3000/latest/meta-data/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "",
					"otherinfo": "",
					"reference": "",
					"cweid": "388",
					"wascid": "20",
					"sourceid": "5"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049",
					"alert": "Storable and Cacheable Content",
					"name": "Storable and Cacheable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>",
					"instances":[ 
						{
							"uri": "http://digital-library-app:3000/openapi.json",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						}
					],
					"count": "1",
					"solution": "<p>Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.</p>",
					"otherinfo": "<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.</p>",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "1"
				}
			]
		}
	]
}
